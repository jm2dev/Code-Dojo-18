// Generated by CoffeeScript 1.4.0
(function() {
  var myGraph, nodeA, nodeB, oneNodeGraph, twoNodesGraph;

  chai.should();

  myGraph = {
    nodes: [],
    lengz: function() {
      return this.nodes.length;
    }
  };

  nodeA = {
    value: "A",
    children: [nodeB]
  };

  nodeB = {
    value: "B",
    children: [nodeA]
  };

  oneNodeGraph = {
    nodes: [nodeA],
    lengz: function() {
      return this.nodes.length;
    }
  };

  twoNodesGraph = {
    nodes: [nodeA, nodeB],
    lengz: function() {
      return this.nodes.length;
    }
  };

  describe('A graph', function() {
    describe('A graph of zero nodes', function() {
      it('should have length zero', function() {
        return myGraph.lengz().should.equal(0);
      });
      return it('should have no nodes', function() {
        return myGraph.nodes.length.should.equal(0);
      });
    });
    describe('A graph of one nodes', function() {
      it('should have length one', function() {
        return oneNodeGraph.lengz().should.equal(1);
      });
      return it('should have one node', function() {
        return oneNodeGraph.nodes.length.should.equal(1);
      });
    });
    describe('A graph of two nodes', function() {
      it('should have one children', function() {
        return nodeA.children.length.should.equal(1);
      });
      it('should have one children', function() {
        return nodeB.children.length.should.equal(1);
      });
      return it('should have two nodes', function() {
        return twoNodesGraph.lengz().should.equal(2);
      });
    });
    return describe('A node', function() {
      var node;
      node = {
        value: "label",
        children: []
      };
      it('should have a value', function() {
        return node.value.should.equal("label");
      });
      return it('should have zero children', function() {
        return node.children.length.should.equal(0);
      });
    });
  });

}).call(this);
